{"ast":null,"code":"var _jsxFileName = \"/Users/hardikkothari/Movies/book-exchange-platform/Frontend/src/pages/RecievedRequests.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BookCardReci from '../components/BookCardReci';\nimport { useUserContext } from '../context/UserContext';\n\n// const ReceivedRequests = () => {\n//     const [requests, setRequests] = useState([]);\n//     const {user} = useUserContext();\n//     const userId = user.uid; \n\n//     useEffect(() => {\n//         const fetchRequests = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:4000/api/exchange/received/${userId}`);\n//                 setRequests(response.data);\n//             } catch (error) {\n//                 console.error(\"Error fetching received requests:\", error);\n//             }\n//         };\n//         fetchRequests();\n//     }, [userId]);\n\n//     // Function to handle status updates\n//     const handleStatusUpdate = async (requestId, newStatus) => {\n//         try {\n//             await axios.patch(`http://localhost:4000/api/exchange/update/${userId}/${requestId}`, { status: newStatus });\n//             setRequests((prevRequests) => \n//                 prevRequests.map((req) => (req.id === requestId ? { ...req, status: newStatus } : req))\n//             );\n//         } catch (error) {\n//             console.error(\"Error updating request status:\", error);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Received Requests</h2>\n//             {requests.length > 0 ? (\n//                 requests.map((request) => (\n//                     <BookCardReci\n//                         key={request.id}\n//                         request={request}\n//                         onStatusChange={handleStatusUpdate}\n//                     />\n//                 ))\n//             ) : (\n//                 <p>No requests received.</p>\n//             )}\n//         </div>\n//     );\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceivedRequests = () => {\n  /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Received Requests\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = ReceivedRequests;\nexport default ReceivedRequests;\nvar _c;\n$RefreshReg$(_c, \"ReceivedRequests\");","map":{"version":3,"names":["React","useState","useEffect","axios","BookCardReci","useUserContext","jsxDEV","_jsxDEV","ReceivedRequests","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hardikkothari/Movies/book-exchange-platform/Frontend/src/pages/RecievedRequests.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BookCardReci from '../components/BookCardReci';\nimport { useUserContext } from '../context/UserContext';\n\n// const ReceivedRequests = () => {\n//     const [requests, setRequests] = useState([]);\n//     const {user} = useUserContext();\n//     const userId = user.uid; \n\n//     useEffect(() => {\n//         const fetchRequests = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:4000/api/exchange/received/${userId}`);\n//                 setRequests(response.data);\n//             } catch (error) {\n//                 console.error(\"Error fetching received requests:\", error);\n//             }\n//         };\n//         fetchRequests();\n//     }, [userId]);\n\n//     // Function to handle status updates\n//     const handleStatusUpdate = async (requestId, newStatus) => {\n//         try {\n//             await axios.patch(`http://localhost:4000/api/exchange/update/${userId}/${requestId}`, { status: newStatus });\n//             setRequests((prevRequests) => \n//                 prevRequests.map((req) => (req.id === requestId ? { ...req, status: newStatus } : req))\n//             );\n//         } catch (error) {\n//             console.error(\"Error updating request status:\", error);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Received Requests</h2>\n//             {requests.length > 0 ? (\n//                 requests.map((request) => (\n//                     <BookCardReci\n//                         key={request.id}\n//                         request={request}\n//                         onStatusChange={handleStatusUpdate}\n//                     />\n//                 ))\n//             ) : (\n//                 <p>No requests received.</p>\n//             )}\n//         </div>\n//     );\n// };\n\nconst ReceivedRequests=() => {\n    <h2>Received Requests</h2>\n};\n\nexport default ReceivedRequests;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,cAAc,QAAQ,wBAAwB;;AAEvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,gBAAgB,GAACA,CAAA,KAAM;EACzB,aAAAD,OAAA;IAAAE,QAAA,EAAI;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAC9B,CAAC;AAACC,EAAA,GAFIN,gBAAgB;AAItB,eAAeA,gBAAgB;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}