{"ast":null,"code":"var _jsxFileName = \"/Users/hardikkothari/Movies/book-exchange-platform/Frontend/src/pages/RecievedRequests.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BookCardReci from '../components/BookCardReci';\nimport { useUserContext } from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceivedRequests = () => {\n  _s();\n  const [requests, setRequests] = useState([]);\n  const {\n    user\n  } = useUserContext();\n  const userId = user.uid;\n  useEffect(() => {\n    const fetchRequests = async () => {\n      try {\n        const response = await axios.get(`http://localhost:4000/api/exchange/received/${userId}`);\n        setRequests(response.data);\n      } catch (error) {\n        console.error(\"Error fetching received requests:\", error);\n      }\n    };\n    fetchRequests();\n  }, [userId]);\n\n  // Function to handle status updates\n  const handleStatusUpdate = async (id, requestId, newStatus) => {\n    // Optimistically update the state before the server request\n    setRequests(prevRequests => prevRequests.map(req => req.id === id ? {\n      ...req,\n      status: newStatus\n    } : req));\n    try {\n      // Send the status update request to the server\n      await axios.patch(`http://localhost:4000/api/exchange/update/${userId}/${id}`, {\n        status: newStatus,\n        requestId: requestId\n      });\n    } catch (error) {\n      console.error(\"Error updating request status:\", error);\n      // Revert the status change if there's an error\n      setRequests(prevRequests => prevRequests.map(req => req.id === id ? {\n        ...req,\n        status: req.status\n      } : req));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-white\",\n      children: \"Received Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), requests.length > 0 ? requests.map(request => /*#__PURE__*/_jsxDEV(BookCardReci, {\n      request: request,\n      onStatusChange: handleStatusUpdate\n    }, request.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No requests received.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(ReceivedRequests, \"myIafWXARdKOsdrQod3wYJoqcgs=\", false, function () {\n  return [useUserContext];\n});\n_c = ReceivedRequests;\nexport default ReceivedRequests;\nvar _c;\n$RefreshReg$(_c, \"ReceivedRequests\");","map":{"version":3,"names":["React","useState","useEffect","axios","BookCardReci","useUserContext","jsxDEV","_jsxDEV","ReceivedRequests","_s","requests","setRequests","user","userId","uid","fetchRequests","response","get","data","error","console","handleStatusUpdate","id","requestId","newStatus","prevRequests","map","req","status","patch","children","className","fileName","_jsxFileName","lineNumber","columnNumber","length","request","onStatusChange","_c","$RefreshReg$"],"sources":["/Users/hardikkothari/Movies/book-exchange-platform/Frontend/src/pages/RecievedRequests.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BookCardReci from '../components/BookCardReci';\nimport { useUserContext } from '../context/UserContext';\n\nconst ReceivedRequests = () => {\n    const [requests, setRequests] = useState([]);\n    const { user } = useUserContext();\n    const userId = user.uid;\n\n    useEffect(() => {\n        const fetchRequests = async () => {\n            try {\n                const response = await axios.get(`http://localhost:4000/api/exchange/received/${userId}`);\n                setRequests(response.data);\n            } catch (error) {\n                console.error(\"Error fetching received requests:\", error);\n            }\n        };\n        fetchRequests();\n    }, [userId]);\n\n    // Function to handle status updates\n    const handleStatusUpdate = async (id, requestId, newStatus) => {\n        // Optimistically update the state before the server request\n        setRequests((prevRequests) =>\n            prevRequests.map((req) => (req.id === id ? { ...req, status: newStatus } : req))\n        );\n\n        try {\n            // Send the status update request to the server\n            await axios.patch(`http://localhost:4000/api/exchange/update/${userId}/${id}`, { status: newStatus, requestId: requestId });\n        } catch (error) {\n            console.error(\"Error updating request status:\", error);\n            // Revert the status change if there's an error\n            setRequests((prevRequests) =>\n                prevRequests.map((req) => (req.id === id ? { ...req, status: req.status } : req))\n            );\n        }\n    };\n\n    return (\n        <div>\n            <h2 className=\"text-white\">Received Requests</h2>\n            {requests.length > 0 ? (\n                requests.map((request) => (\n                    <BookCardReci\n                        key={request.id}\n                        request={request}\n                        onStatusChange={handleStatusUpdate}\n                    />\n                ))\n            ) : (\n                <p>No requests received.</p>\n            )}\n        </div>\n    );\n};\n\nexport default ReceivedRequests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}